from eth_account import Account
from loguru import logger

from bera_tools import BeraChainTools
from config.address_config import bend_address, weth_address, honey_address, bend_pool_address,address_key, wbear_address
from config.yescaptcha import client_key,solver_provider

for address in address_key:
    account = Account.from_key(address)#这里是私钥在config文件里添加地址
    #client_key与solver_provider需要注册yescaptcha,在yescaptcha文件里添加
    bera = BeraChainTools(private_key=account.key,client_key=client_key, solver_provider=solver_provider,rpc_url='https://rpc.ankr.com/berachain_testnet')

    # 授权
    #approve_result = bera.approve_token(bend_address, int("0x" + "f" * 64, 16),  wbear_address)
    #logger.debug(approve_result)
    # deposit
    #bera_balance = bera.w3.eth.get_balance(account.address)
    #result = bera.bend_deposit(int(bera_balance*0.2),  wbear_address)
    #logger.debug(result)

    # borrow
    balance = bera.bend_contract.functions.getUserAccountData(account.address).call()[2]
    logger.debug(balance)
    result = bera.bend_borrow(int(balance * 0.8 * 1e10), honey_address)
    logger.debug(result)

   
    # 查询数量 
    call_result = bera.bend_borrows_contract.functions.getUserReservesData(bend_pool_address, bera.account.address).call()
    repay_amount = call_result[0][0][4]
    logger.debug(repay_amount)
    # 授权
    approve_result = bera.approve_token(bend_address, int("0x" + "f" * 64, 16), honey_address)
    logger.debug(approve_result)
    # repay
    result = bera.bend_repay(int(repay_amount * 1), honey_address)
    logger.debug(result)
