# -*- coding: utf-8 -*-
from eth_account import Account
from loguru import logger
import random
import time

from bera_tools import BeraChainTools
from config.address_config import (
    usdc_address, wbear_address, weth_address, bex_approve_liquidity_address,
    usdc_pool_liquidity_address, weth_pool_liquidity_address,address_key,
    bex_swap_address
)
from config.yescaptcha import client_key,solver_provider

for address in address_key:
    account = Account.from_key(address)#这里是私钥在config文件里添加地址
    #client_key与solver_provider需要注册yescaptcha
    bera = BeraChainTools(private_key=account.key,client_key=client_key, solver_provider=solver_provider,rpc_url='https://rpc.ankr.com/berachain_testnet')

    # bex 使用bera交换usdc
    bera_balance = bera.w3.eth.get_balance(account.address)
    logger.debug(bera_balance)
    result = bera.bex_swap(int(bera_balance * random.uniform(0.1,0.2)), wbear_address, usdc_address)
    logger.debug(result)
    time.sleep(30)
    # bex 使用usdc交换weth，目前与weth无法操作，官网也无法执行
    #usdc_balance = bera.usdc_contract.functions.balanceOf(account.address).call()
    #print(usdc_balance)
    #approve_result=bera.approve_token(bex_swap_address, int("0x" + "f" * 64, 16), usdc_address)
    #logger.debug(approve_result)
    #result = bera.bex_swap(int(usdc_balance * 0.1), usdc_address, weth_address)
    #logger.debug(result)##

    # 授权usdc
    approve_result = bera.approve_token(bex_approve_liquidity_address, int("0x" + "f" * 64, 16), usdc_address)
    logger.debug(approve_result)
    # bex 增加 usdc 流动性
    time.sleep(45)
    usdc_balance = bera.usdc_contract.functions.balanceOf(account.address).call()
    result = bera.bex_add_liquidity(int(usdc_balance * random.uniform(0.1,0.5)), usdc_pool_liquidity_address, usdc_address)
    logger.debug(result)
    
    # 授权weth
    #approve_result = bera.approve_token(bex_approve_liquidity_address, int("0x" + "f" * 64, 16), weth_address)
    #logger.debug(approve_result)
    # bex 增加 weth 流动性
    #weth_balance = bera.weth_contract.functions.balanceOf(account.address).call()
    #result = bera.bex_add_liquidity(int(weth_balance * 0.5), weth_pool_liquidity_address, weth_address)
    #logger.debug(result)
